"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _reactDom = require("react-dom");

var _reactDom2 = _interopRequireDefault(_reactDom);

require("./style.css");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var DEFAULT_PLACEHOLDER_STRING = "Select...";

var NavDropdown = function (_React$Component) {
  _inherits(NavDropdown, _React$Component);

  function NavDropdown(props) {
    _classCallCheck(this, NavDropdown);

    var _this = _possibleConstructorReturn(this, (NavDropdown.__proto__ || Object.getPrototypeOf(NavDropdown)).call(this, props));

    _this.state = {
      selected: _this.parseValue(props.value, props.options) || {
        label: typeof props.placeholder === "undefined" ? DEFAULT_PLACEHOLDER_STRING : props.placeholder,
        value: ""
      },
      isOpen: false
    };

    _this.mounted = true;
    _this.controlElmRef = _react2.default.createRef();
    _this.handleDocumentClick = _this.handleDocumentClick.bind(_this);
    _this.fireChangeEvent = _this.fireChangeEvent.bind(_this);
    return _this;
  }

  _createClass(NavDropdown, [{
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(newProps) {
      if (newProps.value) {
        var selected = this.parseValue(newProps.value, newProps.options);
        if (selected !== this.state.selected) {
          this.setState({ selected: selected });
        }
      } else {
        this.setState({
          selected: {
            label: typeof newProps.placeholder === "undefined" ? DEFAULT_PLACEHOLDER_STRING : newProps.placeholder,
            value: ""
          }
        });
      }
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      document.addEventListener("click", this.handleDocumentClick, false);
      document.addEventListener("touchend", this.handleDocumentClick, false);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.mounted = false;
      document.removeEventListener("click", this.handleDocumentClick, false);
      document.removeEventListener("touchend", this.handleDocumentClick, false);
    }
  }, {
    key: "handleMouseDown",
    value: function handleMouseDown(event) {
      if (this.props.onFocus && typeof this.props.onFocus === "function") {
        this.props.onFocus(this.state.isOpen);
      }
      if (event.type === "mousedown" && event.button !== 0) return;
      event.stopPropagation();
      event.preventDefault();

      if (!this.props.disabled) {
        this.setState({
          isOpen: !this.state.isOpen
        });
      }
    }
  }, {
    key: "parseValue",
    value: function parseValue(value, options) {
      var option = void 0;

      if (typeof value === "string") {
        for (var i = 0, num = options.length; i < num; i++) {
          if (options[i].type === "group") {
            var match = options[i].items.filter(function (item) {
              return item.value === value;
            });
            if (match.length) {
              option = match[0];
            }
          } else if (typeof options[i].value !== "undefined" && options[i].value === value) {
            option = options[i];
          }
        }
      }

      return option || value;
    }
  }, {
    key: "setValue",
    value: function setValue(value, label) {
      var newState = {
        selected: {
          value: value,
          label: label
        },
        isOpen: false
      };
      this.fireChangeEvent(newState);
      this.setState(newState);
    }
  }, {
    key: "fireChangeEvent",
    value: function fireChangeEvent(newState) {
      if (newState.selected !== this.state.selected) {
        if (this.props.onChange) {
          this.props.onChange(newState.selected);
        }
        if (newState && newState.selected && this.controlElmRef.current) {
          this.controlElmRef.current.value = newState.selected.value;
        }
      }
    }
  }, {
    key: "renderOption",
    value: function renderOption(option) {
      var value = option.value;
      if (typeof value === "undefined") {
        value = option.label || option;
      }
      var label = option.label || option.value || option;
      var isSelected = value === this.state.selected.value || value === this.state.selected;

      var optionClass = ("nav-dropdown-option " + (!!option.className ? option.className : "") + " " + (isSelected ? "is-selected" : "")).trim();

      return _react2.default.createElement(
        "div",
        {
          key: value,
          className: optionClass,
          onMouseDown: this.setValue.bind(this, value, label),
          onClick: this.setValue.bind(this, value, label),
          role: "option",
          "aria-selected": isSelected ? "true" : "false"
        },
        label
      );
    }
  }, {
    key: "buildMenu",
    value: function buildMenu() {
      var _this2 = this;

      var options = this.props.options;

      var ops = options.map(function (option) {
        if (option.type === "group") {
          var groupTitle = _react2.default.createElement(
            "div",
            { className: "nav-dropdown-title" },
            option.name
          );
          var _options = option.items.map(function (item) {
            return _this2.renderOption(item);
          });

          return _react2.default.createElement(
            "div",
            {
              className: "nav-dropdown-group",
              key: option.name,
              role: "listbox",
              tabIndex: "-1"
            },
            groupTitle,
            _options
          );
        } else {
          return _this2.renderOption(option);
        }
      });

      return ops.length ? ops : _react2.default.createElement(
        "div",
        { className: "nav-dropdown-noresults" },
        "No options found"
      );
    }
  }, {
    key: "handleDocumentClick",
    value: function handleDocumentClick(event) {
      if (this.mounted) {
        if (!_reactDom2.default.findDOMNode(this).contains(event.target)) {
          if (this.state.isOpen) {
            this.setState({ isOpen: false });
          }
        }
      }
    }
  }, {
    key: "isValueSelected",
    value: function isValueSelected() {
      return typeof this.state.selected === "string" || this.state.selected.value !== "";
    }
  }, {
    key: "render",
    value: function render() {
      var _props = this.props,
          controlClassName = _props.controlClassName,
          placeholderClassName = _props.placeholderClassName,
          menuClassName = _props.menuClassName,
          arrowClassName = _props.arrowClassName,
          arrowClosed = _props.arrowClosed,
          arrowOpen = _props.arrowOpen,
          className = _props.className;


      var disabledClass = this.props.disabled ? "nav-dropdown-disabled" : "";
      var placeHolderValue = typeof this.state.selected === "string" ? this.state.selected : this.state.selected.label;

      var dropdownClass = ("nav-dropdown-root " + (!!className ? className : "") + " " + (this.state.isOpen ? "is-open" : "")).trim();

      var controlClass = ("nav-dropdown-control " + (!!controlClassName ? controlClassName : "") + " " + (!!disabledClass ? disabledClass : "")).trim();

      var placeholderClass = ("nav-dropdown-placeholder " + (!!placeholderClassName ? placeholderClassName : "") + " " + (this.isValueSelected ? "is-selected" : "")).trim();

      var menuClass = ("nav-dropdown-menu " + (!!menuClassName ? menuClassName : "") + " ").trim();

      var arrowClass = ("nav-dropdown-arrow " + (!!arrowClassName ? arrowClassName : "") + " ").trim();

      var value = _react2.default.createElement(
        "div",
        { className: placeholderClass },
        placeHolderValue
      );
      var menu = this.state.isOpen ? _react2.default.createElement(
        "div",
        { className: menuClass, "aria-expanded": "true" },
        this.buildMenu()
      ) : null;

      return _react2.default.createElement(
        "div",
        { className: dropdownClass },
        _react2.default.createElement(
          "div",
          {
            className: controlClass,
            ref: this.controlElmRef,
            name: this.props.name,
            "value-prop": this.props["value-prop"],
            onMouseDown: this.handleMouseDown.bind(this),
            onTouchEnd: this.handleMouseDown.bind(this),
            "aria-haspopup": "listbox"
          },
          value,
          _react2.default.createElement(
            "div",
            { className: "nav-dropdown-arrow-wrapper" },
            arrowOpen && arrowClosed ? this.state.isOpen ? arrowOpen : arrowClosed : _react2.default.createElement("span", { className: arrowClass })
          )
        ),
        menu
      );
    }
  }]);

  return NavDropdown;
}(_react2.default.Component);

exports.default = NavDropdown;